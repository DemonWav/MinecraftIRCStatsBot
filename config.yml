# must be a boolean value, "true" or "false"
# enables or disables entire plugin statistics tracking
# if set to false, this overrides all other individual tracking settings
trackStats: true
stats:
  # record deaths
  death: true

  # record when a player breaks a block
  blockBreak: true

  # record when a player places a block
  blockPlace: true

  # keep track of how long players are online
  playTime: true

  # record number of items crafted
  itemsCrafted: true

  # record number of times a player is on fire
  onFire: true

  # record number of times a player changes worlds
  worldChange: true

  # record when a player breaks a tool
  toolsBroken: true

  # record number of arrows shot
  arrowsShot: true

  # record the last time a player joined
  lastJoinTime: true

  # record the last time a player left
  lastLeaveTime: true

  # record when a player fills a bucket
  fillBucket: true

  # record when a player empties a bucket
  emptyBucket: true

  # record when a player drops an item
  itemDrops: true

  # record when a player picks up an item
  itemPickups: true

  # record number of times a player enters a bed
  enterBed: true

  # keep track of how long a player has been in bed
  timeSlept: true

  # keep track of the total number of words a player has spoken
  wordsSpoken: true

  # keep track of the total damage a player has received
  damageTaken: true

  # record when a player catches a fish
  fishCaught: true

  # keep track of the number of times a player joins the server
  joins: true

  # keep track of the total xp gained by a player
  xpGained: true

  # keep track of how far a player has moved
  move: true

  # record when a user kills a mob
  kills: true

  # keeps track of the number of times a user has jumped
  jumps: true

  # keeps track of how far a player has fallen
  fallen: true

  # track the number of times a player has died in specific worlds
  deathLocations: true

  # track the number of eggs thrown
  eggThrows: true

  # track how many chickens have hatched from egg throws
  chickHatches: true

  # track how many ender pearls have been thrown
  enderPearls: true

  # track how many animals a player has bred
  animalsBred: true

  # track how many blocks of TNT a player has set off
  tntDetonated: true

  # track how many times a player has enchanted an item
  enchantsDone: true

  # track the highest level a player has obtained
  highestLevel: true

  # track the amount of damage a player has dealt to specific mobs and other players
  damageDealt: true


permissions:
  # boolean value for whether a player can reset his or her own stats
  # with the /resetstats command
  resetOwnStats: true

  # the two options for admin levels are currently "op" and "user"
  # level of admin that can reset another player's stats
  resetAnotherPlayerStats: op

  # level of admin that can reset a full server's stats
  resetServerStats: op

writingToDisk:
  # how often the plugin should calculate the totals for each stat on each player and write it to the disk
  # these totals will be used for the totals page on the website frontend
  # the acceptable time units are:
  #   seconds --> s
  #   minutes --> m
  #   hours   --> h
  #   days    --> d
  #   weeks   --> w
  # you must provide an integer followed (with no space in between) by one of the single letters stated above
  # representing the different units of time. You must use integers, so if you wanted to make the plugin update
  # the totals every 1.5 hours, you would use "90m" for 90 minutes
  # valid examples:
  #   10m   for 10 minutes
  #   1h    for 1 hour
  #   2d    for 2 days
  #   36h   for 1.5 days (36 hours)
  #   1w    for 1 week
  totalsUpdating: 10m

  # how often the plugin should write to the individual stats of the players to the disk
  # the time intervals follow the exact same syntax as explained above for the totalsUpdating field
  # you may also elect to write the stats to disk in real time. Since the plugin does all of it's writing to disk
  # on a separate thread real time shouldn't be a problem for most servers. This would allow the stats to be available
  # to the website immediately with no delay. Larger servers with more activity, or servers that aren't as powerful may
  # want to write the stats to disk every few minutes, instead, however.
  # to enable real time stat saving, use real-time
  statsToDisk: real-time

backups:
  # determines whether the plugin should keep a backup of the stats
  # the below settings only apply if set to true
  backupStats: true

  # if the above is true, where?
  # make sure the plugin can write to this path!
  # it is recommended that this path be in the plugin's directory
  # to specify the plugin directory, use the ~ variable
  # if the folder specified does not already exist, the plugin will create it recursively
  # default is ~/backups
  backupStatsLocation: ~/backups

  # how often should the plugin backup stats?
  # the acceptable time units are:
  #   seconds --> s
  #   minutes --> m
  #   hours   --> h
  #   days    --> d
  #   weeks   --> w
  # you must provide an integer followed (with no space in between) by one of the single letters stated above
  # representing the different units of time. You must use integers, so if you wanted to make the plugin update
  # the totals every 1.5 hours, you would use "90m" for 90 minutes
  # valid examples:
  #   10m   for 10 minutes
  #   1h    for 1 hour
  #   2d    for 2 days
  #   36h   for 1.5 days (36 hours)
  #   1w    for 1 week
  backupStatsInterval: 1h

  # how many backups of the stats should the plugin keep?
  # once the number of backups on disk exceeds this number, the plugin will delete the oldest backup
  # if you do not want the plugin to delete backups, use 0
  backupStatsNumber: 3

  # format for naming backups
  # the format must either utilize a date or backup number, or both.
  # to use a backup number, use the !! variable, and the backup number will be used, incremented for each backup
  # all other text will be sent directly to SimpleDateFormat. To see the SimpleDateFormat syntax, go to
  # http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html
  # the !! variable will be handled by the plugin and will not be sent to SimpleDateFormat
  # all backups will be zipped and placed in the backupStatsLocation

  # here is an example of how the format works:
  # the default format is: !!-yyyyMMdd-HH:mm:ss
  # for the 27th backup on the 7th of February of the year 2014 at 2:37:54 PM, the output will look like:
  # 27-20140207-14:37:54.zip
  backupName: !!-yyyyMMdd-HH:mm:ss
